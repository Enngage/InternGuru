@model UI.Builders.Internship.Views.InternshipBrowseView
@using Core.Helpers
@using UI.Builders.Internship.Enums
@using UI.Builders.Master.Enums
@using UI.Builders.Shared.Enums
@using UI.Builders.Shared.Models
@using UI.Modules.Header
@{
    Model.Metadata.BasicMetadata.Title = "Stáže";
    Model.Metadata.BasicMetadata.Description = "Najdi si stáž z uvedené nabídky a pracuj pro svou oblíbenou IT nebo technologickou firmu. Nauč se nové technologie nebo se zdokonal v tom, co znáš a poznej jak to chodí v praxi.";
    Model.Header = new UiHeader()
    {
        Type = UiHeaderTypeEnum.Colored,
        Size = UIHeaderSizeEnum.Inherit,
        Title = Model.Metadata.BasicMetadata.Title,
        SubText = "Získej cennou praxi a třeba i práci.",
        Color = UIHeaderColorEnum.Primary
    };

    Model.Layout.Type = LayoutTypeEnum.Light;

    Layout = Model.Layout.Path;

    var currentCategory = Helpers.UrlHelper.GetRouteParam("category", null) ?? Helpers.UrlHelper.GetQueryString("category") ?? string.Empty;

    var searchVal = Helpers.UrlHelper.GetQueryString("search", string.Empty);
    var cityVal = Helpers.UrlHelper.GetQueryString("city", string.Empty);
    var paidVal = Helpers.UrlHelper.GetQueryString("paid", string.Empty);
    var lengthVal = Helpers.UrlHelper.GetQueryString("length", string.Empty);
    var orderVal = Helpers.UrlHelper.GetQueryString("order", string.Empty);

    var totalInternshipCount = Model.InternshipCategories.Sum(m => m.InternshipCount);
}

@Helpers.ScriptHelper.RequireScript("/scripts/views/internship/browseInternships")

<div class="ui container">

    @using (Html.BeginForm("Search", "Internships", FormMethod.Get, null))
    {
        <input type="hidden" name="category" value="@currentCategory" />
        <div class="ui grid">

            <div class="sixteen wide mobile sixteen wide tablet thirteen wide computer column">
                @foreach (var option in Model.OrderFilters)
                {
                    var routeObj = new { category = currentCategory, paid = paidVal, search = searchVal, city = cityVal, length = lengthVal, order = option.Filter.ToString().ToLower() };

                    if (orderVal.Equals(option.Filter.ToString(), StringComparison.OrdinalIgnoreCase) || (string.IsNullOrEmpty(orderVal) && option.Filter.ToString().Equals(InternshipOrderFilterEnum.Newest.ToString())))
                    {
                        <a class="ui button primary" href="@Url.Action("Index", "Internships", routeObj)">@option.DisplayName</a>
                    }
                    else
                    {
                        <a class="ui button w-button-no-background" href="@Url.Action("Index", "Internships", routeObj)">@option.DisplayName</a>
                    }
                }
                <hr class="w-hr-primary" />
            </div>

            <div class="sixteen wide mobile sixteen wide tablet eleven wide computer column">
                <div class="w-mobile-show">
                    <div class="ui divided items">
                        @foreach (var internship in Model.Internships)
                        {
                            <div class="item">
                                <div class="middle aligned content">
                                    <a href="@Url.Action("Index", "Internship", new {id = internship.ID, codeName = internship.CodeName})">@internship.Title</a>
                                    <p class="w-font-size-small">
                                        @InternshipHelper.GetInternshipDurationDisplayValue(internship.MinDurationType, internship.MinDurationDefaultValue, internship.MaxDurationType, internship.MaxDurationDefaultValue) | @internship.City
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="w-mobile-hide">
                    <div class="ui divided items">
                        @foreach (var internship in Model.Internships)
                        {
                            <div class="item">
                                <div class="ui tiny image">
                                    <a href="@Url.Action("Index", "Company", new {codeName = internship.CompanyCodeName})">
                                        <img alt="" src="@Helpers.ImageHelper.GetCompanyLogo(internship.CompanyGuid)">
                                    </a>
                                </div>
                                <div class="middle aligned content">
                                    <a href="@Url.Action("Index", "Internship", new {id = internship.ID, codeName = internship.CodeName})">@internship.Title</a>
                                    <p class="w-font-size-small">
                                        @InternshipHelper.GetInternshipDurationDisplayValue(internship.MinDurationType, internship.MinDurationDefaultValue, internship.MaxDurationType, internship.MaxDurationDefaultValue) | @internship.City
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                @Helpers.PagerHelper.GetPager(Model.Internships)

            </div>
            <div class="sixteen wide mobile sixteen wide tablet five wide computer column">
                <div class="ui secondary very padded segment">
                    <h3>Hledat</h3>

                    <div class="ui form">
                        <div class="field">
                            <div class="ui search _InternshipTitleAutocomplete">
                                <div class="ui fluid icon input">
                                    <input class="prompt" name="search" placeholder="Klíčové slovo ..." type="text" value="@searchVal" autocomplete="off">
                                    <i class="search icon"></i>
                                </div>
                                <div class="results w-font-size-small"></div>
                            </div>
                        </div>

                        <div class="field">
                            <div class="ui search _CitiesAutocomplete">
                                <div class="ui fluid icon input">
                                    <input class="prompt" name="city" placeholder="Město" type="text" value="@cityVal" autocomplete="off">
                                    <i class="world icon"></i>
                                </div>
                                <div class="results w-font-size-small"></div>
                            </div>
                        </div>

                        <div class="field">
                            <select name="length" class="ui fluid dropdown _LengthDropdown">
                                <option value="">Délka stáže</option>
                                @foreach (var option in Model.LengthFilters)
                                {
                                    if (option.Filter.ToString().Equals(lengthVal, StringComparison.OrdinalIgnoreCase))
                                    {
                                        <option selected value="@option.Filter.ToString().ToLower()">@option.DisplayName</option>
                                    }
                                    else
                                    {
                                        <option value="@option.Filter.ToString().ToLower()">@option.DisplayName</option>
                                    }
                                }
                            </select>
                        </div>

                        <div class="field">
                            <button type="submit" class="ui button primary">Hledat</button>
                        </div>
                    </div>

                    <h3>Kategorie</h3>
                    <div class="ui link list">
                        @if (string.IsNullOrEmpty(currentCategory))
                {
                    var routeObj = new { category = "", paid = paidVal, search = searchVal, city = cityVal, length = lengthVal, order = orderVal };
                            <a href="@Url.Action("Index", routeObj)" class="active item">
                                Všechny kategorie
                                <span class="w-body-float-right">@totalInternshipCount</span>
                            </a>
                        }
                        else
                        {
                            var routeObj = new { category = "", paid = paidVal, search = searchVal, city = cityVal, length = lengthVal, order = orderVal };
                            <a href="@Url.Action("Index", routeObj)" class="item">
                                Všechny kategorie
                                <span class="w-body-float-right">@totalInternshipCount</span>
                            </a>
                        }
                        @foreach (var category in Model.InternshipCategories)
                {
                    var routeObj = new { category = category.CodeName, paid = paidVal, search = searchVal, city = cityVal, length = lengthVal, order = orderVal };

                    if (currentCategory.Equals(category.CodeName, StringComparison.OrdinalIgnoreCase))
                    {

                                <a href="@Url.Action("Index", routeObj)" class="active item">
                                    @category.CategoryName
                                    <span class="w-font-bold w-body-float-right">@category.InternshipCount</span>
                                </a>
                            }
                            else
                            {
                                <a href="@Url.Action("Index", routeObj)" class="item">
                                    @category.CategoryName
                                    <span class="w-body-float-right">@category.InternshipCount</span>
                                </a>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="w-margin-top-30">
    @Helpers.HeaderHelper.RenderHeader(new UiHeader()
{
    Type = UiHeaderTypeEnum.Colored,
    Color = UIHeaderColorEnum.Medium,
    Title = "Nenašel jsi stáž?",
    SubText = "Zaregistruj se a nech si zasílat nové stáže přímo z tvého města!",
    Buttons = new List<UIHeaderButton>()
        {
            new UIHeaderButton()
            {
                Type = UIHeaderButtonTypeEnum.Primary,
                Text = "Zaregistruj se zde",
                ButtonUrl = Url.Action("Register", "Account")
            }
        }
})
</div>

